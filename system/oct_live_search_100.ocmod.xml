<?xml version="1.0" encoding="utf-8"?>
<modification>
  <code>phpner_live_search_100</code>
  <name>Phpner - Live search</name>
  <version>1.0.0</version>
  <author>Phpner</author>
  <link>http://phpner.net/</link>
  <file path="catalog/controller/product/search.php">
		<operation error="skip">
	    <search><![CDATA[public function index() {]]></search>
	    <add position="replace"><![CDATA[
		    public function ajax() {
				  $this->load->model('tool/image');
				  $this->load->model('catalog/product');
					$this->load->language('product/product');
					
					$product_data = array();
          
          if (isset($this->request->get['keyword'])) {
            $sql = "SELECT p.product_id, (SELECT AVG(rating) AS total FROM " . DB_PREFIX . "review r1 WHERE r1.product_id = p.product_id AND r1.status = '1' GROUP BY r1.product_id) AS rating, (SELECT price FROM " . DB_PREFIX . "product_discount pd2 WHERE pd2.product_id = p.product_id AND pd2.customer_group_id = '" . (int)$this->config->get('config_customer_group_id') . "' AND pd2.quantity = '1' AND ((pd2.date_start = '0000-00-00' OR pd2.date_start < NOW()) AND (pd2.date_end = '0000-00-00' OR pd2.date_end > NOW())) ORDER BY pd2.priority ASC, pd2.price ASC LIMIT 1) AS discount, (SELECT price FROM " . DB_PREFIX . "product_special ps WHERE ps.product_id = p.product_id AND ps.customer_group_id = '" . (int)$this->config->get('config_customer_group_id') . "' AND ((ps.date_start = '0000-00-00' OR ps.date_start < NOW()) AND (ps.date_end = '0000-00-00' OR ps.date_end > NOW())) ORDER BY ps.priority ASC, ps.price ASC LIMIT 1) AS special";
						
						if (isset($this->request->get['filter_category_id']) && !empty($this->request->get['filter_category_id'])) {
							$sql .= " FROM " . DB_PREFIX . "category_path cp LEFT JOIN " . DB_PREFIX . "product_to_category p2c ON (cp.category_id = p2c.category_id)";
							$sql .= " LEFT JOIN " . DB_PREFIX . "product p ON (p2c.product_id = p.product_id)";
						} else {
							$sql .= " FROM " . DB_PREFIX . "product p";
						}
						
						$sql .= " LEFT JOIN " . DB_PREFIX . "product_description pd ON (p.product_id = pd.product_id) LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (p.product_id = p2s.product_id) WHERE pd.language_id = '" . (int)$this->config->get('config_language_id') . "' AND p.status = '1' AND p.date_available <= NOW() AND p2s.store_id = '" . (int)$this->config->get('config_store_id') . "'";
						
						if (isset($this->request->get['filter_category_id']) && !empty($this->request->get['filter_category_id'])) {
							$sql .= " AND cp.path_id = '" . (int)$this->request->get['filter_category_id'] . "'";
						}
						
						if (isset($this->request->get['keyword']) && !empty($this->request->get['keyword'])) {
							$sql .= " AND (";
							$implode = array();
							$words = explode(' ', trim(preg_replace('/\s+/', ' ', $this->request->get['keyword'])));
							
							foreach ($words as $word) {
								$implode[] = "pd.name LIKE '%" . $this->db->escape($word) . "%'";
							}
							
							if ($implode) {
								$sql .= " " . implode(" AND ", $implode) . "";
							}
							
							$sql .= " OR LCASE(p.sku) LIKE '%" . $this->db->escape(utf8_strtolower($this->request->get['keyword'])) . "%'";
							$sql .= " OR LCASE(p.model) LIKE '%" . $this->db->escape(utf8_strtolower($this->request->get['keyword'])) . "%'";
							$sql .= ")";
						}
						
						$sql .= " GROUP BY p.product_id ORDER BY p.sort_order ASC, LOWER(pd.name) ASC, LOWER(p.model) ASC LIMIT 15";
						
						$query = $this->db->query($sql);
						
						foreach ($query->rows as $result) {
							$product_info = $this->model_catalog_product->getProduct($result['product_id']);
							
							if ($product_info['image']) {
								$image = $this->model_tool_image->resize($product_info['image'], 60, 60);
							} else {
								$image = $this->model_tool_image->resize('placeholder.png', 60, 60);
							}
							
							if (($this->config->get('config_customer_price') && $this->customer->isLogged()) || !$this->config->get('config_customer_price')) {
								$price = $this->currency->format($this->tax->calculate($product_info['price'], $product_info['tax_class_id'], $this->config->get('config_tax')), $this->session->data['currency']);
							} else {
								$price = false;
							}
							
							if ((float)$product_info['special']) {
								$special = $this->currency->format($this->tax->calculate($product_info['special'], $product_info['tax_class_id'], $this->config->get('config_tax')), $this->session->data['currency']);
							} else {
								$special = false;
							}
							
							if ($product_info['quantity'] <= 0) {
								$stock = $product_info['stock_status'];
							} elseif ($this->config->get('config_stock_display')) {
								$stock = $product_info['quantity'];
							} else {
								$stock = $this->language->get('text_instock');
							}
							
							$product_data[] = array(
								'name'    => htmlspecialchars_decode($product_info['name'] . ' (' . $product_info['model'] . ')', ENT_QUOTES),
                'href'    => $this->url->link('product/product', 'product_id=' . $product_info['product_id']),
                'image'   => $image,
								'price'   => $price,
								'special' => $special,
								'stock'   => $stock
							);
						}
          }

          echo json_encode($product_data);
				}
				public function index() {
				]]>
			</add>
		</operation>
	</file>
	<file path="catalog/controller/common/search.php">
		<operation>
      <search><![CDATA[
				if (isset($this->request->get['search'])) {
      ]]></search>
      <add position="before"><![CDATA[
				$this->load->language('phpner/phpner_store');
				$data['phpner_search_cat'] = $this->language->get('phpner_search_cat');
        
        if (isset($this->request->get['category_id'])) {
					$category_id = $this->request->get['category_id'];
				} else {
					$category_id = 0;
				}

				$data['category_id'] = $category_id;
				$data['search_phpner_cat'] = array();
				
				$search_cats = $this->model_catalog_category->getCategories(0);
				
				foreach ($search_cats as $search_cat) {
					$data['search_phpner_cat'][] = array(
						'category_id' => $search_cat['category_id'],
						'name'        => $search_cat['name']
					);
				}
      ]]></add>
    </operation>
  </file>
</modification>	